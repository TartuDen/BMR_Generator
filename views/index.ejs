<!-- index.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <!-- Your custom CSS -->
    <link rel="stylesheet" href="css/style.css">
    <title>Bootstrap Layout</title>

</head>

<body>

    <!-- Header -->
    <%- include("partials/header.ejs") %>

        <!-- Main content -->
        <div class="wrapper">
            <!-- Sidebar -->
            <%- include("partials/sidebar.ejs") %>

                <!-- Table content -->
                <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4">
                    <div class="d-flex justify-content-center align-items-center" style="min-height: 10vh;">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                   
                                    <th>Op.#</th>
                                    <th>Description</th>
                                    <th>Other</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% operationsFromServer.forEach((operation, index)=> { %>
                                    <tr>
                                        
                                        <td style="width: 5%; padding: 0; margin: 0;">
                                            <input type="number" class="form-control" id="op<%= index %>"
                                                name="op<%= index %>" value="<%= operation.number %>" min="1">
                                        </td>

                                        <!-- Third column -->
                                        <td>
                                            <!-- Description -->
                                            <div id="description<%= index %>">
                                                <textarea id="descriptionTextarea<%= index %>" class="form-control"
                                                    rows="1"><%= populatePrevOps(operation) %></textarea>
                                            </div>

                                        </td>
                                        <script>
                                            // Function to adjust textarea height based on content
                                            function adjustTextareaHeight(textarea) {
                                                textarea.style.height = 'auto'; // Reset height to auto
                                                textarea.style.height = (textarea.scrollHeight + 1) + 'px'; // Set height to content height
                                            }

                                            // Get the textarea element
                                            var textarea = document.getElementById("descriptionTextarea<%= index %>");

                                            // Call the adjustTextareaHeight function when the content changes
                                            textarea.addEventListener('input', function () {
                                                adjustTextareaHeight(textarea);
                                            });

                                            // Call the adjustTextareaHeight function initially
                                            adjustTextareaHeight(textarea);
                                        </script>


                                        <!-- Fourth column -->
                                        <td style="width: 15%;">
                                            <!-- Other fields -->
                                            <div id="other<%= index %>">
                                                <textarea id="otherTextarea<%= index %>" class="form-control"
                                                    rows="<%= operation.typicalActivity.other ? 4 : 1 %>"><%= operation.typicalActivity.other %></textarea>
                                            </div>
                                        </td>
                                        
                                    </tr>
                                    <% }) %>

                                        <tr>
                                            
                                            <% if(locals.lastOpNum) { %>
                                                <td style="width: 5%; padding: 0; margin: 0;">
                                                    <input type="number" class="form-control" id="op" name="op"
                                                        value="<%= lastOpNum %>" min="1">
                                                </td>
                                                <% } %>
                                                    <td>
                                                        <div id="description">

                                                        </div>
                                                    </td>

                                                    <td style="width: 10%;">
                                                        <div id="other"></div>
                                                    </td>
                                        </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- Equipment and Activity Type Selection, and Button to parse data -->
                    <div class="row mt-3">
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="equipmentType">Equipment Type</label>
                                <select class="form-control" id="equipmentType"
                                    onchange="saveSelectedItem(this); populateActivityType(this.value);">
                                    <option value="">--select--</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="activityType">Type of Activity</label>
                                <select class="form-control" id="activityType"
                                    onchange="purgeDataFromOperation(); saveSelectedItem(this); populateDescription(); populateOther(this);">
                                    <option value="">--select--</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-1 text-center mt-4 ">
                            <button class="btn btn-primary" onclick="parseDataToOperation()">Parse Data</button>
                        </div>
                    </div>

                </main>
        </div>



        <!-- Footer -->
        <%- include("partials/footer.ejs") %>

            <!-- Bootstrap JS -->
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
                integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
                crossorigin="anonymous">
                </script>
            <script>
                let dataFromOperation = <%- JSON.stringify(dataFromOperationServer) %>;

            </script>
            <script>


                function saveSelectedItem(selectElement) {
                    // Retrieve the selected value from the select element
                    var id = selectElement.id;
                    var value = selectElement.value;
                    // Add new elements into dataFromOperation
                    dataFromOperation[id] = value;
                }
            </script>

            <script src="https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js"></script>

            <script src="helpers.js"></script>
            <script src="operationClasses.js"></script>

            <script>

                async function populateEquipmentTypes() {
                    try {
                        let equipmentTypes = <%- JSON.stringify(equipmentTypes) %>;

                        // Check if equipmentTypes is an array or not

                        var selectElement = document.getElementById('equipmentType');
                        selectElement.innerHTML = '';
                        addDefaultOption(selectElement);
                        equipmentTypes.forEach(function (equipmentType) {
                            var option = document.createElement('option');
                            option.value = equipmentType.name;
                            option.textContent = equipmentType.name;
                            selectElement.appendChild(option);
                        });

                    } catch (error) {
                        console.error("Error populating equipment types:", error);
                        // Handle the error if needed
                    }
                }


                window.onload = async function () {
                    await populateEquipmentTypes();
                };

                async function getActivityType() {
                    try {
                        // Call GetListEquipmentTypesMOCK to retrieve the list of equipment types
                        const response = await axios.post("http://localhost:8081/filter?equipmentType=" + dataFromOperation["equipmentType"]);
                        let activityTypes = JSON.parse(response.data);
                        return activityTypes;
                    } catch (error) {
                        console.log(error);
                        return null;
                    }
                }

                async function populateActivityType(equipmentType) {
                    try {
                        // Call GetListEquipmentTypesMOCK to retrieve the list of equipment types
                        let activityTypes = await getActivityType();
                        var selectElement = document.getElementById('activityType');

                        // Clear previous options
                        selectElement.innerHTML = '';

                        // Add default option "--select--"
                        addDefaultOption(selectElement);

                        // Add equipment types as options
                        activityTypes.forEach(function (activity) {
                            var option = document.createElement('option');
                            option.value = activity.Content;
                            option.textContent = activity.OperationType;
                            selectElement.appendChild(option);
                        });

                        // Event listener for when an option is selected
                        selectElement.addEventListener('change', function () {
                            // Get the selected option
                            var selectedOption = selectElement.options[selectElement.selectedIndex];

                            let selectedActivityType = selectedOption.textContent;
                            let operationType = "operationType";

                            // Add operationType the dataFromOperation object
                            dataFromOperation[operationType] = selectedActivityType;
                        });

                    } catch (error) {
                        console.error("Error populating activity types:", error);
                        // Handle the error if needed
                    }
                }

                async function populateOther(selectedElement) {
                    let selectedDescription = selectedElement.value;
                    let activityTypes = await getActivityType();



                    activityTypes.forEach(function (activity) {

                        if (selectedDescription === activity.Content) {
                            const divElementOther = document.getElementById('other');
                            divElementOther.innerHTML = '';
                            const newPreOther = document.createElement("pre");
                            newPreOther.innerHTML = activity.Other;
                            divElementOther.appendChild(newPreOther);
                        }

                    });




                }

                async function populateDescription() {
                    const divElementDescription = document.getElementById('description');
                    // Clear previous content
                    divElementDescription.innerHTML = '';

                    if (dataFromOperation["activityType"]) {
                        const equipmentList = <%- JSON.stringify(equipmentListMemory) %>;
                        const materialsMemory = <%- JSON.stringify(materialsMemory) %>;
                        const project = <%- JSON.stringify(projectListMemory[0]) %>;
                        const tp = <%- JSON.stringify(projectListMemory[1]) %>;
                        const eqParams = <%- JSON.parse(parametersForOperations) %>;
                        // Call replaceTextWithSelect to populate the description
                        await replaceTextWithSelect(dataFromOperation["activityType"], equipmentList, materialsMemory, project, tp, eqParams).then((description) => {
                            // Create a new <p> element
                            const newP = document.createElement("pre");

                            // Set the html content of the <p> element with the populated description
                            newP.innerHTML = description;
                            // Append the <p> element to the div
                            divElementDescription.appendChild(newP);
                        }).catch((error) => {
                            console.error('Error populating description:', error);
                        });
                    } else {
                        console.error('Activity type is not defined');
                        // If the activity type is not defined, handle it accordingly
                    }
                }

                function addDefaultOption(selectElement) {
                    // Create the default option element
                    var defaultOption = document.createElement('option');
                    defaultOption.value = '';
                    defaultOption.textContent = '--select--';

                    // Append the default option to the select element
                    selectElement.appendChild(defaultOption);
                }

                async function parseDataToOperation() {

                    let lastOpNum = document.getElementById("op").value;

                    // Retrieve the content of the <pre> element with id 'description'
                    let finalText = document.getElementById('description').innerHTML;

                    let other = document.getElementById("other").innerText;


                    // Create an list of instances of Equipment class
                    let equipmentList = [];
                    for (let key in dataFromOperation) {
                        if (key.startsWith('equipment_')) {
                            let equipmentName = key.replace('equipment_', '');
                            let equipment = new Equipment(equipmentName, dataFromOperation[key]);
                            equipmentList.push(equipment);
                        }
                    }

                    // Create an instance of TypicalActivity class
                    let Activity = new TypicalActivity(
                        dataFromOperation['operationType'],
                        dataFromOperation['activityType'],
                        other,
                        dataFromOperation["params_time"],
                        dataFromOperation["params_temp"],
                        dataFromOperation["params_rpm"],
                        dataFromOperation["params_flow"],
                        dataFromOperation["params_ppumpSet"],
                        dataFromOperation["params_torr"],
                        equipmentList
                    );
                    const project = <%- JSON.stringify(projectListMemory[0]) %>;
                    const tp = <%- JSON.stringify(projectListMemory[1]) %>;
                    // Create an instance of Operation class
                    let newOp = new Operation(project, tp, lastOpNum, dataFromOperation['equipmentType'], Activity, dataFromOperation["material"]);

                    //send newOp to local server
                    try {
                        const localServerResp = await axios.post('/update_operations', newOp);
                        window.location.reload();
                    } catch (error) {
                        console.error('Error updating operations:', error);
                    }

                }


                function purgeDataFromOperation() {
                    // Clear the dataFromOperation object EXCEPT equipmentType
                    for (let key in dataFromOperation) {
                        if (key !== 'equipmentType') {
                            delete dataFromOperation[key];
                        }
                    }
                    console.log("Data from operation purged.");
                }
            </script>








</body>

</html>