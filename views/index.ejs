<!-- index.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <!-- Your custom CSS -->
    <link rel="stylesheet" href="css/style.css">
    <title>Bootstrap Layout</title>

</head>

<body>

    <!-- Header -->
    <%- include("partials/header.ejs") %>

        <!-- Main content -->
        <div class="wrapper">
            <!-- Sidebar -->
            <%- include("partials/sidebar.ejs") %>

                <!-- Table content -->
                <%- include("partials/operation_table.ejs") %>
        </div>

        <!-- Footer -->
        <%- include("partials/footer.ejs") %>

            <!-- Bootstrap JS -->
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
                integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
                crossorigin="anonymous">
            </script>
            <script>
                    let dataFromOperation = <%- JSON.stringify(dataFromOperationServer) %>;

            </script>
            <script>
                

                function saveSelectedItem(selectElement) {
                    // Retrieve the selected value from the select element
                    var id = selectElement.id;
                    var value = selectElement.value;
                    // Add new elements into dataFromOperation
                    dataFromOperation[id] = value;
                    console.log(dataFromOperation);
                }
            </script>

            <script src="https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js"></script>

            <script src="helpers.js"></script>
            <script src="operationClasses.js"></script>

            <script>

                async function populateEquipmentTypes() {
                    try {
                        let equipmentTypes = <%- JSON.stringify(equipmentTypes) %>;

                        // Check if equipmentTypes is an array or not

                        var selectElement = document.getElementById('equipmentType');
                        selectElement.innerHTML = '';
                        addDefaultOption(selectElement);
                        equipmentTypes.forEach(function (equipmentType) {
                            var option = document.createElement('option');
                            option.value = equipmentType.name;
                            option.textContent = equipmentType.name;
                            selectElement.appendChild(option);
                        });

                    } catch (error) {
                        console.error("Error populating equipment types:", error);
                        // Handle the error if needed
                    }
                }


                window.onload = async function () {
                    await populateEquipmentTypes();
                };


                async function populateActivityType(equipmentType) {
                    try {
                        // Call GetListEquipmentTypesMOCK to retrieve the list of equipment types
                        const response = await axios.post("http://localhost:8081/filter?equipmentType=" + dataFromOperation["equipmentType"]);
                        let activityTypes = JSON.parse(response.data);
                        var selectElement = document.getElementById('activityType');

                        // Clear previous options
                        selectElement.innerHTML = '';

                        // Add default option "--select--"
                        addDefaultOption(selectElement);

                        // Add equipment types as options
                        activityTypes.forEach(function (activity) {
                            var option = document.createElement('option');
                            option.value = activity.Content;
                            option.textContent = activity.OperationType;
                            selectElement.appendChild(option);
                        });

                        // Event listener for when an option is selected
                        selectElement.addEventListener('change', function () {
                            // Get the selected option
                            var selectedOption = selectElement.options[selectElement.selectedIndex];

                            let selectedActivityType = selectedOption.textContent;
                            let operationType = "operationType";

                            // Add operationType the dataFromOperation object
                            dataFromOperation[operationType] = selectedActivityType;
                        });

                    } catch (error) {
                        console.error("Error populating activity types:", error);
                        // Handle the error if needed
                    }
                }


                async function populateDescription() {
                    const divElement = document.getElementById('description');

                    // Clear previous content
                    divElement.innerHTML = '';

                    if (dataFromOperation["activityType"]) {
                        const equipmentList = <%- JSON.stringify(equipmentListMemory) %>;
                        const materialsMemory = <%- JSON.stringify(materialsMemory) %>;
                        const project = <%- JSON.stringify(projectListMemory[0]) %>;
                        const tp = <%- JSON.stringify(projectListMemory[1]) %>;
                        const eqParams = <%- JSON.parse(parametersForOperations) %>;
                        // Call replaceTextWithSelect to populate the description
                        await replaceTextWithSelect(dataFromOperation["activityType"], equipmentList, materialsMemory, project, tp, eqParams).then((description) => {
                            // Create a new <p> element
                            const newP = document.createElement("pre");

                            // Set the html content of the <p> element with the populated description
                            newP.innerHTML = description;
                            // Append the <p> element to the div
                            divElement.appendChild(newP);
                        }).catch((error) => {
                            console.error('Error populating description:', error);
                        });
                    } else {
                        console.error('Activity type is not defined');
                        // If the activity type is not defined, handle it accordingly
                    }
                }

                function addDefaultOption(selectElement) {
                    // Create the default option element
                    var defaultOption = document.createElement('option');
                    defaultOption.value = '';
                    defaultOption.textContent = '--select--';

                    // Append the default option to the select element
                    selectElement.appendChild(defaultOption);
                }

                function parseDataToOperation() {

                    let lastOpNum = document.getElementById("op").value;

                    // Retrieve the content of the <pre> element with id 'description'
                    let finalText = document.getElementById('description').innerHTML;


                    // Create an list of instances of Equipment class
                    let equipmentList = [];
                    for (let key in dataFromOperation) {
                        if (key.startsWith('equipment_')) {
                            let equipmentName = key.replace('equipment_', '');
                            let equipment = new Equipment(equipmentName, dataFromOperation[key]);
                            equipmentList.push(equipment);
                        }
                    }

                    // Create an instance of TypicalActivity class
                    let Activity = new TypicalActivity(
                        dataFromOperation['operationType'],
                        dataFromOperation['activityType'],
                        dataFromOperation["params_time"],
                        dataFromOperation["params_temp"],
                        dataFromOperation["params_rpm"],
                        dataFromOperation["params_flow"],
                        dataFromOperation["params_ppumpSet"],
                        dataFromOperation["params_torr"],
                        equipmentList
                    );

                    // Create an instance of Operation class
                    let newOp = new Operation(lastOpNum, dataFromOperation['equipmentType'], Activity);

                    console.log("*********** newOp *************");
                    console.log(newOp);
                    sendOpsToServer(newOp);

                }


                function purgeDataFromOperation() {
                    // Clear the dataFromOperation object EXCEPT equipmentType
                    for (let key in dataFromOperation) {
                        if (key !== 'equipmentType') {
                            delete dataFromOperation[key];
                        }
                    }
                    console.log("Data from operation purged.");
                }

                async function sendOpsToServer(newOp) {
                    try {
                        const localServerResp = await axios.post('/update_operations', newOp);
                        console.log('Operations updated successfully:', localServerResp.data);
                    } catch (error) {
                        console.error('Error updating operations:', error);
                    }
                }


            </script>



</body>

</html>